{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nvar _f = require(\"@antv/f2\");\nvar _f2Context = require(\"@antv/f2-context\");\nfunction wrapEvent(e) {\n  if (!e) return;\n  if (!e.preventDefault) {\n    e.preventDefault = function () {};\n  }\n  return e;\n}\nvar getPixelRatio = function getPixelRatio() {\n  return my.getSystemInfoSync().pixelRatio;\n};\n// 判断是否是新版 canvas 所支持的调用方法（AppX 2.7.0 及以上）\nvar isAppX2CanvasEnv = function isAppX2CanvasEnv() {\n  return my.canIUse('canvas.onReady') && my.canIUse('createSelectorQuery.return.node');\n};\nComponent({\n  props: {\n    onRender: function onRender(_props) {},\n    // width height 会作为元素兜底的宽高使用\n    width: null,\n    height: null,\n    type: '2d' // canvas 2d, 基础库 2.7 以上支持\n  },\n  /**\n   * 组件创建时触发\n   * 注意：\n   *    使用该生命周期，项目配置需启用：\"component2\": true\n   */\n  onInit: function onInit() {\n    this.setCanvasId();\n  },\n  didMount: function didMount() {\n    var _this = this;\n    if (isAppX2CanvasEnv()) {\n      return;\n    }\n    var id = this.data.id;\n    var query = my.createSelectorQuery({\n      page: this.$page\n    });\n    query.select(\"#\".concat(id)).boundingClientRect().exec(function (res) {\n      // 获取画布实际宽高, 用props的宽高做失败兜底\n      var _ref = res && res[0] ? res[0] : _this.props,\n        width = _ref.width,\n        height = _ref.height;\n      var pixelRatio = getPixelRatio();\n      // 高清解决方案\n      _this.setData({\n        width: width * pixelRatio,\n        height: height * pixelRatio\n      }, function () {\n        var myCtx = my.createCanvasContext(id);\n        var context = (0, _f2Context.my)(myCtx);\n        _this.canvasRender({\n          width: width,\n          height: height,\n          context: context,\n          pixelRatio: pixelRatio\n        });\n      });\n    });\n  },\n  didUpdate: function didUpdate() {\n    var canvas = this.canvas,\n      props = this.props;\n    if (!canvas) return;\n    var children = props.onRender(props);\n    canvas.update({\n      children: children\n    });\n  },\n  didUnmount: function didUnmount() {\n    var canvas = this.canvas;\n    if (!canvas) return;\n    canvas.destroy();\n  },\n  methods: {\n    setCanvasId: function setCanvasId() {\n      var pageId = this.$page && this.$page.$id || 0;\n      var id = \"f2-canvas-\".concat(pageId, \"-\").concat(this.$id);\n      this.setData({\n        id: id\n      });\n    },\n    onCanvasReady: function onCanvasReady() {\n      var _this2 = this;\n      var id = this.data.id;\n      var query = my.createSelectorQuery();\n      query.select(\"#\".concat(id))\n      // @ts-ignore\n      .node().exec(function (res) {\n        if (!res[0]) {\n          return;\n        }\n        var canvas = res[0].node;\n        var width = canvas.width,\n          height = canvas.height;\n        var pixelRatio = getPixelRatio();\n        canvas.width = width * pixelRatio;\n        canvas.height = height * pixelRatio;\n        var context = canvas.getContext('2d');\n        _this2.canvasRender({\n          width: width,\n          height: height,\n          pixelRatio: pixelRatio,\n          context: context\n        });\n      });\n    },\n    canvasRender: function canvasRender(_ref2) {\n      var width = _ref2.width,\n        height = _ref2.height,\n        pixelRatio = _ref2.pixelRatio,\n        context = _ref2.context;\n      if (!width || !height) {\n        return;\n      }\n      var children = this.props.onRender(this.props);\n      var canvas = new _f.Canvas({\n        pixelRatio: pixelRatio,\n        width: width,\n        height: height,\n        context: context,\n        children: children\n      });\n      canvas.render();\n      this.canvas = canvas;\n      this.canvasEl = canvas.canvas.get('el');\n    },\n    click: function click(e) {\n      var canvasEl = this.canvasEl;\n      if (!canvasEl) {\n        return;\n      }\n      var event = wrapEvent(e);\n      var detail = e.detail,\n        target = e.target;\n      var x = detail.x,\n        y = detail.y;\n      var _target$offsetLeft = target.offsetLeft,\n        offsetLeft = _target$offsetLeft === void 0 ? 0 : _target$offsetLeft,\n        _target$offsetTop = target.offsetTop,\n        offsetTop = _target$offsetTop === void 0 ? 0 : _target$offsetTop;\n      // 包装成 touch 对象\n      event.touches = [{\n        x: x - offsetLeft,\n        y: y - offsetTop\n      }];\n      canvasEl.dispatchEvent('click', event);\n    },\n    touchStart: function touchStart(e) {\n      var canvasEl = this.canvasEl;\n      if (!canvasEl) {\n        return;\n      }\n      canvasEl.dispatchEvent('touchstart', wrapEvent(e));\n    },\n    touchMove: function touchMove(e) {\n      var canvasEl = this.canvasEl;\n      if (!canvasEl) {\n        return;\n      }\n      canvasEl.dispatchEvent('touchmove', wrapEvent(e));\n    },\n    touchEnd: function touchEnd(e) {\n      var canvasEl = this.canvasEl;\n      if (!canvasEl) {\n        return;\n      }\n      canvasEl.dispatchEvent('touchend', wrapEvent(e));\n    }\n  }\n});"]}