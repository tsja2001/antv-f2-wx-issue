"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElementStatus = void 0;
Object.defineProperty(exports, "Fragment", {
  enumerable: true,
  get: function get() {
    return _fragment.default;
  }
});
Object.defineProperty(exports, "compareRenderTree", {
  enumerable: true,
  get: function get() {
    return _compareRenderTree.default;
  }
});
Object.defineProperty(exports, "jsx", {
  enumerable: true,
  get: function get() {
    return _jsxClassic.jsx;
  }
});
Object.defineProperty(exports, "render", {
  enumerable: true,
  get: function get() {
    return _render.default;
  }
});
Object.defineProperty(exports, "renderJSXElement", {
  enumerable: true,
  get: function get() {
    return _renderJSXElement.default;
  }
});
var _jsxClassic = require("./jsx-classic");
var _fragment = _interopRequireDefault(require("./fragment"));
var _render = _interopRequireDefault(require("./render"));
var _renderJSXElement = _interopRequireDefault(require("./renderJSXElement"));
var _compareRenderTree = _interopRequireDefault(require("./compareRenderTree"));
var ElementStatus = _interopRequireWildcard(require("./elementStatus"));
exports.ElementStatus = ElementStatus;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }